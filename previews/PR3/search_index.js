var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [LazyReports]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#LazyReports.LazyReports","page":"API","title":"LazyReports.LazyReports","text":"LazyReports\n\nLazy reports in Julia.\n\n\n\n\n\n","category":"module"},{"location":"api/#LazyReports.LazyReport","page":"API","title":"LazyReports.LazyReport","text":"struct LazyReport\n\nRepresents a lazy report.\n\nDon't instantiate directly, use lazyreport()\n\n\n\n\n\n","category":"type"},{"location":"api/#LazyReports.lazyreport","page":"API","title":"LazyReports.lazyreport","text":"lazyreport()\nlazyreport(contents...)\nlazyreport(contents...)\n\nGenerate a lazy report, e.g. a data processing report.\n\nUse lazyreport!(rpt, contents...) to add more content to a report.\n\nExample:\n\nusing LazyReports, StructArrays, IntervalSets, Plots\n\ntbl = StructArray(\n    col1 = rand(5), col2 = ClosedInterval.(rand(5), rand(5).+1),\n    col3 = [rand(3) for i in 1:5], col4 = rand(Bool, 5),\n    col5 = [:a, :b, :c, :d, :e], col6 = [\"a\", \"b\", \"c\", \"d\", \"e\"],\n    col7 = [:(a[1]), :(a[2]), :(a[3]), :(a[4]), :(a[5])]\n)\n\nrpt = lazyreport(\n    \"# New report\",\n    \"Table 1:\", tbl\n)\nlazyreport!(rpt, \"Figure 1:\", stephist(randn(10^3)))\nlazyreport!(rpt, \"Figure 2:\", histogram2d(randn(10^4), randn(10^4), format = :png))\n\nshow(stdout, MIME\"text/plain\"(), rpt)\nshow(stdout, MIME\"text/html\"(), rpt)\nshow(stdout, MIME\"text/markdown\"(), rpt)\n\nwrite_lazyreport(\"report.txt\", rpt)\nwrite_lazyreport(\"report.html\", rpt)\nwrite_lazyreport(\"report.md\", rpt)\n\nSee LazyReports.lazyreport_for_show! for how to specialize the behavior of show for specific report content types.\n\n\n\n\n\n","category":"function"},{"location":"api/#LazyReports.lazyreport!","page":"API","title":"LazyReports.lazyreport!","text":"lazyreport!(rpt::LazyReport, contents...)\n\nAdd more content to report rpt. See lazyreport for an example.\n\n\n\n\n\n","category":"function"},{"location":"api/#LazyReports.lazyreport_for_show!","page":"API","title":"LazyReports.lazyreport_for_show!","text":"LazyReports.lazyreport_for_show!(rpt::LazyReport, mime::MIME, content)\n\nAdd the contents of content to rpt in a way that is optimized for being displayed (e.g. via show) with the given mime type.\n\nshow(output, mime, rpt) first transforms rpt by converting all contents of rpt using lazyreport_for_show!(rpt::LazyReport, mime, content).\n\nDefaults to lazyreport!(rpt, content), except for tables (Tables.istable(content) == true), which are converted to Markdown tables by default for uniform appearance.\n\nlazyreport_for_show! is not inteded to be called by users, but to be specialized for specific types of content content. Content types not already supported will primarily require specialization of\n\nlazyreport_for_show!(rpt::LazyReport, ::MIME\"text/markdown\", content::SomeType)\n\nIn some cases it may be desireable to specialize lazyreport_for_show! for MIME types like MIME\"text/html\" and MIME\"text/plain\" as well.\n\n\n\n\n\n","category":"function"},{"location":"api/#LazyReports.write_lazyreport","page":"API","title":"LazyReports.write_lazyreport","text":"write_lazyreport(filename::AbstractString, rpt::LazyReport)\nwrite_lazyreport(filename::AbstractString, mime::MIME, rpt::LazyReport)\n\nWrite lazyreport rpt to file filename.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#LazyReports.jl","page":"Home","title":"LazyReports.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LazyReports provides report generation with minimal dependencies, depending on LazyReports should have minimal load-time impact for Julia packages. Reports are a mixture and data objects, and are lazy in the sense that they are both easy to create and that contents are only rendered when the reports is displayed to written to a file. This way, reports can be generated as part of algorithms and workflows with only a small runtime overhead.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The central function of the package is lazyreport, it generates a report object that can be rendered (via show and display) with different MIME types. lazyreport allows for appending content to reports.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reports should be displayed automatically on the REPL (as far as supported by the objects in the reports), in Jupyter and Pluto notebooks and in Visual Studio Code (when using the Julia extension). Reports can also be written to files using write_lazyreport.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LazyReports, StructArrays, IntervalSets, Plots\n\ntbl = StructArray(\n    col1 = rand(5), col2 = ClosedInterval.(rand(5), rand(5).+1),\n    col3 = [rand(3) for i in 1:5], col4 = rand(Bool, 5),\n    col5 = [:a, :b, :c, :d, :e], col6 = [\"a\", \"b\", \"c\", \"d\", \"e\"],\n    col7 = [:(a[1]), :(a[2]), :(a[3]), :(a[4]), :(a[5])]\n)\n\nrpt = lazyreport(\n    \"# New report\",\n    \"Table 1:\", tbl\n)\nlazyreport!(rpt, \"Figure 1:\", stephist(randn(10^3)))\nlazyreport!(rpt, \"Figure 2:\", histogram2d(randn(10^4), randn(10^4), format = :png))","category":"page"},{"location":"#Rendering-Plots","page":"Home","title":"Rendering Plots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When rendering reports using MIME(\"text/plain\"), e.g. when showing reports on the REPL and when writing reports to \".txt\" files, LazyReports will try to convert Plots.jl plots to the Plots.Plots.UnicodePlotsBackend. UnicodePlots will be loaded automatically, but the package UnicodePlots must be part of your Julia environment or rendering will fail. Note that converting Plots generated with a different backend (e.g. the default GR backend) to UnicodePlots will not always yield satisfactory results, depending on the type of plot.","category":"page"}]
}
